# .coderabbit.yaml for a Rust project

# -----------------
# 核心设置
# -----------------

# 设置 CodeRabbit 回复的语言 (e.g., "en", "zh-CN")
language: "zh-CN"

# -----------------
# 内容过滤 (Rust 项目关键)
# -----------------

# 排除 Rust 项目中不需要审查的文件和目录
exclude:
  # 这是最重要的排除项！'target' 目录包含了所有的编译产物、依赖和构建缓存。
  # 审查这个目录毫无意义，并且会消耗大量资源。
  - "target/**"

  # Cargo.lock 是由 Cargo 自动生成的依赖锁定文件，不应被审查。
  - "Cargo.lock"

  # 通常也排除 Markdown 文件和 License
  - "**/*.md"
  - "LICENSE"
  
  # 如果你有特定的配置文件或数据文件，也在这里添加
  # - "config/*.toml"

# -----------------
# 审查定制 (为 Rust 优化的指令)
# -----------------

# 这是配置的核心部分！我们为 AI 提供针对 Rust 语言的特定审查指令。
extra_instructions: |
  这是一个 Rust 项目。请像一位经验丰富的 Rust 开发者一样进行审查，并严格遵循以下规则：

  1.  **所有权和生命周期 (Ownership & Lifetimes)**: 
      - 重点检查是否存在不必要的 `.clone()` 调用，建议使用借用 (`&` 或 `&mut`) 来优化性能。
      - 检查是否存在明显的生命周期问题或复杂的生命周期注解，并提出简化建议。

  2.  **错误处理 (Error Handling)**:
      - 严格审查 `.unwrap()` 和 `.expect()` 的使用。在库代码或生产代码中，应优先使用 `?` 操作符或 `match` 语句进行优雅的错误处理。
      - 检查函数是否返回 `Result` 或 `Option`，但其结果被忽略。

  3.  **代码风格和惯例 (Idiomatic Rust)**:
      - 推荐使用迭代器 (iterators) 及其链式方法 (`.map()`, `.filter()`, `.fold()` 等) 来替代传统的 `for` 循环。
      - 检查 `match` 语句是否可以被 `if let` 或 `while let`