# .github/workflows/coderabbit_review.yml

# 工作流的名称
name: CodeRabbit AI Review

# 触发工作流的事件
on:
  # 1. 当 PR 状态变化时触发
  pull_request:
    types: [opened, reopened, synchronize]

  # 2. 当在 PR 的审查评论中回复 @coderabbitai 时触发，用于对话功能
  pull_request_review_comment:
    types: [created]

# 安全设置：给予工作流所需的最小权限
permissions:
  contents: read          # 允许读取代码内容
  pull-requests: write    # 允许在 PR 中发表评论

# 并发控制：确保在同一个 PR 上只运行一个审查实例
# 如果有新的 commit 推送，会自动取消上一个正在运行的审查
concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  review:
    # 仅在 PR 不是草稿 (Draft) 状态时运行，避免在未准备好的 PR 上浪费资源
    if: ${{ !github.event.pull_request.draft }}
    
    runs-on: ubuntu-latest
    name: CodeRabbit AI Code Review

    steps:
      # 步骤 1: 检出仓库代码
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # 需要获取 PR 的完整历史，以便 CodeRabbit 进行更深入的分析
          fetch-depth: 0

      # 步骤 2: 运行 CodeRabbit AI 核心审查 Action
      - name: CodeRabbit AI Review
        uses: coderabbitai/ai-pr-reviewer@latest